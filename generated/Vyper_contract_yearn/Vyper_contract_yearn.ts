// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class VestingEscrowCreated extends ethereum.Event {
  get params(): VestingEscrowCreated__Params {
    return new VestingEscrowCreated__Params(this);
  }
}

export class VestingEscrowCreated__Params {
  _event: VestingEscrowCreated;

  constructor(event: VestingEscrowCreated) {
    this._event = event;
  }

  get funder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get escrow(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get vesting_start(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get vesting_duration(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get cliff_length(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Vyper_contract_yearn extends ethereum.SmartContract {
  static bind(address: Address): Vyper_contract_yearn {
    return new Vyper_contract_yearn("Vyper_contract_yearn", address);
  }

  deploy_vesting_contract(
    token: Address,
    recipient: Address,
    amount: BigInt,
    vesting_duration: BigInt
  ): Address {
    let result = super.call(
      "deploy_vesting_contract",
      "deploy_vesting_contract(address,address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(vesting_duration)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy_vesting_contract(
    token: Address,
    recipient: Address,
    amount: BigInt,
    vesting_duration: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy_vesting_contract",
      "deploy_vesting_contract(address,address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(vesting_duration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deploy_vesting_contract1(
    token: Address,
    recipient: Address,
    amount: BigInt,
    vesting_duration: BigInt,
    vesting_start: BigInt
  ): Address {
    let result = super.call(
      "deploy_vesting_contract",
      "deploy_vesting_contract(address,address,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(vesting_duration),
        ethereum.Value.fromUnsignedBigInt(vesting_start)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy_vesting_contract1(
    token: Address,
    recipient: Address,
    amount: BigInt,
    vesting_duration: BigInt,
    vesting_start: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy_vesting_contract",
      "deploy_vesting_contract(address,address,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(vesting_duration),
        ethereum.Value.fromUnsignedBigInt(vesting_start)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deploy_vesting_contract2(
    token: Address,
    recipient: Address,
    amount: BigInt,
    vesting_duration: BigInt,
    vesting_start: BigInt,
    cliff_length: BigInt
  ): Address {
    let result = super.call(
      "deploy_vesting_contract",
      "deploy_vesting_contract(address,address,uint256,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(vesting_duration),
        ethereum.Value.fromUnsignedBigInt(vesting_start),
        ethereum.Value.fromUnsignedBigInt(cliff_length)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy_vesting_contract2(
    token: Address,
    recipient: Address,
    amount: BigInt,
    vesting_duration: BigInt,
    vesting_start: BigInt,
    cliff_length: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy_vesting_contract",
      "deploy_vesting_contract(address,address,uint256,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(vesting_duration),
        ethereum.Value.fromUnsignedBigInt(vesting_start),
        ethereum.Value.fromUnsignedBigInt(cliff_length)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  target(): Address {
    let result = super.call("target", "target():(address)", []);

    return result[0].toAddress();
  }

  try_target(): ethereum.CallResult<Address> {
    let result = super.tryCall("target", "target():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class Deploy_vesting_contractCall extends ethereum.Call {
  get inputs(): Deploy_vesting_contractCall__Inputs {
    return new Deploy_vesting_contractCall__Inputs(this);
  }

  get outputs(): Deploy_vesting_contractCall__Outputs {
    return new Deploy_vesting_contractCall__Outputs(this);
  }
}

export class Deploy_vesting_contractCall__Inputs {
  _call: Deploy_vesting_contractCall;

  constructor(call: Deploy_vesting_contractCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get vesting_duration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class Deploy_vesting_contractCall__Outputs {
  _call: Deploy_vesting_contractCall;

  constructor(call: Deploy_vesting_contractCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class Deploy_vesting_contract1Call extends ethereum.Call {
  get inputs(): Deploy_vesting_contract1Call__Inputs {
    return new Deploy_vesting_contract1Call__Inputs(this);
  }

  get outputs(): Deploy_vesting_contract1Call__Outputs {
    return new Deploy_vesting_contract1Call__Outputs(this);
  }
}

export class Deploy_vesting_contract1Call__Inputs {
  _call: Deploy_vesting_contract1Call;

  constructor(call: Deploy_vesting_contract1Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get vesting_duration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get vesting_start(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class Deploy_vesting_contract1Call__Outputs {
  _call: Deploy_vesting_contract1Call;

  constructor(call: Deploy_vesting_contract1Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class Deploy_vesting_contract2Call extends ethereum.Call {
  get inputs(): Deploy_vesting_contract2Call__Inputs {
    return new Deploy_vesting_contract2Call__Inputs(this);
  }

  get outputs(): Deploy_vesting_contract2Call__Outputs {
    return new Deploy_vesting_contract2Call__Outputs(this);
  }
}

export class Deploy_vesting_contract2Call__Inputs {
  _call: Deploy_vesting_contract2Call;

  constructor(call: Deploy_vesting_contract2Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get vesting_duration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get vesting_start(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get cliff_length(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class Deploy_vesting_contract2Call__Outputs {
  _call: Deploy_vesting_contract2Call;

  constructor(call: Deploy_vesting_contract2Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
